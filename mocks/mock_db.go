// Code generated by MockGen. DO NOT EDIT.
// Source: database/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	dynamodb "github.com/aws/aws-sdk-go/service/dynamodb"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDynamoDBAdapter is a mock of DynamoDBAdapter interface.
type MockDynamoDBAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockDynamoDBAdapterMockRecorder
}

// MockDynamoDBAdapterMockRecorder is the mock recorder for MockDynamoDBAdapter.
type MockDynamoDBAdapterMockRecorder struct {
	mock *MockDynamoDBAdapter
}

// NewMockDynamoDBAdapter creates a new mock instance.
func NewMockDynamoDBAdapter(ctrl *gomock.Controller) *MockDynamoDBAdapter {
	mock := &MockDynamoDBAdapter{ctrl: ctrl}
	mock.recorder = &MockDynamoDBAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamoDBAdapter) EXPECT() *MockDynamoDBAdapterMockRecorder {
	return m.recorder
}

// PutItem mocks base method.
func (m *MockDynamoDBAdapter) PutItem(input *dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutItem", input)
	ret0, _ := ret[0].(*dynamodb.PutItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItem indicates an expected call of PutItem.
func (mr *MockDynamoDBAdapterMockRecorder) PutItem(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItem", reflect.TypeOf((*MockDynamoDBAdapter)(nil).PutItem), input)
}

// GetItem mocks base method.
func (m *MockDynamoDBAdapter) GetItem(input *dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", input)
	ret0, _ := ret[0].(*dynamodb.GetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockDynamoDBAdapterMockRecorder) GetItem(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockDynamoDBAdapter)(nil).GetItem), input)
}

// DeleteItem mocks base method.
func (m *MockDynamoDBAdapter) DeleteItem(input *dynamodb.DeleteItemInput) (*dynamodb.DeleteItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", input)
	ret0, _ := ret[0].(*dynamodb.DeleteItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockDynamoDBAdapterMockRecorder) DeleteItem(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockDynamoDBAdapter)(nil).DeleteItem), input)
}

// UpdateItem mocks base method.
func (m *MockDynamoDBAdapter) UpdateItem(input *dynamodb.UpdateItemInput) (*dynamodb.UpdateItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", input)
	ret0, _ := ret[0].(*dynamodb.UpdateItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockDynamoDBAdapterMockRecorder) UpdateItem(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockDynamoDBAdapter)(nil).UpdateItem), input)
}

// Scan mocks base method.
func (m *MockDynamoDBAdapter) Scan(input *dynamodb.ScanInput) (*dynamodb.ScanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", input)
	ret0, _ := ret[0].(*dynamodb.ScanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockDynamoDBAdapterMockRecorder) Scan(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockDynamoDBAdapter)(nil).Scan), input)
}

// CreateTable mocks base method.
func (m *MockDynamoDBAdapter) CreateTable(input *dynamodb.CreateTableInput) (*dynamodb.CreateTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", input)
	ret0, _ := ret[0].(*dynamodb.CreateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockDynamoDBAdapterMockRecorder) CreateTable(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockDynamoDBAdapter)(nil).CreateTable), input)
}

// DescribeTable mocks base method.
func (m *MockDynamoDBAdapter) DescribeTable(input *dynamodb.DescribeTableInput) (*dynamodb.DescribeTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeTable", input)
	ret0, _ := ret[0].(*dynamodb.DescribeTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTable indicates an expected call of DescribeTable.
func (mr *MockDynamoDBAdapterMockRecorder) DescribeTable(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTable", reflect.TypeOf((*MockDynamoDBAdapter)(nil).DescribeTable), input)
}
