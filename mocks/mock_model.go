// Code generated by MockGen. DO NOT EDIT.
// Source: model/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	database "github.com/axelspringer/swerve/database"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabaseAdapter is a mock of DatabaseAdapter interface.
type MockDatabaseAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseAdapterMockRecorder
}

// MockDatabaseAdapterMockRecorder is the mock recorder for MockDatabaseAdapter.
type MockDatabaseAdapterMockRecorder struct {
	mock *MockDatabaseAdapter
}

// NewMockDatabaseAdapter creates a new mock instance.
func NewMockDatabaseAdapter(ctrl *gomock.Controller) *MockDatabaseAdapter {
	mock := &MockDatabaseAdapter{ctrl: ctrl}
	mock.recorder = &MockDatabaseAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseAdapter) EXPECT() *MockDatabaseAdapterMockRecorder {
	return m.recorder
}

// CreateRedirect mocks base method.
func (m *MockDatabaseAdapter) CreateRedirect(redirect database.Redirect) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRedirect", redirect)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRedirect indicates an expected call of CreateRedirect.
func (mr *MockDatabaseAdapterMockRecorder) CreateRedirect(redirect interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRedirect", reflect.TypeOf((*MockDatabaseAdapter)(nil).CreateRedirect), redirect)
}

// GetRedirectByDomain mocks base method.
func (m *MockDatabaseAdapter) GetRedirectByDomain(name string) (database.Redirect, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedirectByDomain", name)
	ret0, _ := ret[0].(database.Redirect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedirectByDomain indicates an expected call of GetRedirectByDomain.
func (mr *MockDatabaseAdapterMockRecorder) GetRedirectByDomain(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedirectByDomain", reflect.TypeOf((*MockDatabaseAdapter)(nil).GetRedirectByDomain), name)
}

// DeleteRedirectByDomain mocks base method.
func (m *MockDatabaseAdapter) DeleteRedirectByDomain(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRedirectByDomain", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRedirectByDomain indicates an expected call of DeleteRedirectByDomain.
func (mr *MockDatabaseAdapterMockRecorder) DeleteRedirectByDomain(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRedirectByDomain", reflect.TypeOf((*MockDatabaseAdapter)(nil).DeleteRedirectByDomain), name)
}

// UpdateRedirectByDomain mocks base method.
func (m *MockDatabaseAdapter) UpdateRedirectByDomain(name string, redirect database.Redirect) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRedirectByDomain", name, redirect)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRedirectByDomain indicates an expected call of UpdateRedirectByDomain.
func (mr *MockDatabaseAdapterMockRecorder) UpdateRedirectByDomain(name, redirect interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRedirectByDomain", reflect.TypeOf((*MockDatabaseAdapter)(nil).UpdateRedirectByDomain), name, redirect)
}

// GetRedirectsPaginated mocks base method.
func (m *MockDatabaseAdapter) GetRedirectsPaginated(cursor *string) ([]database.Redirect, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedirectsPaginated", cursor)
	ret0, _ := ret[0].([]database.Redirect)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRedirectsPaginated indicates an expected call of GetRedirectsPaginated.
func (mr *MockDatabaseAdapterMockRecorder) GetRedirectsPaginated(cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedirectsPaginated", reflect.TypeOf((*MockDatabaseAdapter)(nil).GetRedirectsPaginated), cursor)
}

// ImportRedirects mocks base method.
func (m *MockDatabaseAdapter) ImportRedirects(redirects []database.Redirect) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportRedirects", redirects)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportRedirects indicates an expected call of ImportRedirects.
func (mr *MockDatabaseAdapterMockRecorder) ImportRedirects(redirects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportRedirects", reflect.TypeOf((*MockDatabaseAdapter)(nil).ImportRedirects), redirects)
}

// ExportRedirects mocks base method.
func (m *MockDatabaseAdapter) ExportRedirects() ([]database.Redirect, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRedirects")
	ret0, _ := ret[0].([]database.Redirect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRedirects indicates an expected call of ExportRedirects.
func (mr *MockDatabaseAdapterMockRecorder) ExportRedirects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRedirects", reflect.TypeOf((*MockDatabaseAdapter)(nil).ExportRedirects))
}

// GetPwdHash mocks base method.
func (m *MockDatabaseAdapter) GetPwdHash(username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPwdHash", username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPwdHash indicates an expected call of GetPwdHash.
func (mr *MockDatabaseAdapterMockRecorder) GetPwdHash(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPwdHash", reflect.TypeOf((*MockDatabaseAdapter)(nil).GetPwdHash), username)
}
